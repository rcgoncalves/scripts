#!/bin/bash
# ==================================================================================================
# 
# rarch 2.3 - create encrypted TAR archives from directories
# Copyright (C) 2015-2020 Rui Carlos Gonçalves
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# ==================================================================================================
#
# Author:       Rui Carlos Gonçalves <rcgoncalves.pt@gmail.com>
# Version:      2.3
# Date:         November 22, 2020
# License:      GNU GPL v2
#
# ==================================================================================================
#
# ABOUT THIS SCRIPT:
#
# Creates encrypted TAR archives from directories, using GnuPG public key encryption.
#
# ==================================================================================================
#
# Change Log
#
# Version 2.3
#   2020-11-22
#     * Add support for multiple encryption keys.
#
# Version 2.2
#   2017-09-02
#     * Improve use of temporary directories.
#
# Version 2.1
#   2017-08-27
#     * Change exit error codes to use sysexits.h values.
#
# Version 2.0
#   2017-08-26
#     * Change script to use TAR and GnuPG instead of hdiutil.
#     * Make use of date in file name optional.
#     * Improve robustness of the script.
#
# Version 1.0
#   2015-08-01
#     * First version.
#
# ==================================================================================================

set -u

# Error exit codes.
readonly EX_USAGE=64
readonly EX_DATAERR=65
readonly EX_UNAVAILABLE=69
readonly EX_SOFTWARE=70
readonly EX_CANTCREAT=73
readonly EX_IOERR=74

# Prints to the STDOUT the absolute path of a given directory path.
# Params:
# * a directory path (possibly relative to current location).
# Returns:
# * EX_USAGE if the number of arguments is wrong.
# * EX_DATAERR if the path is not a directory.
# * 0 otherwise.
get_absolute_dir_path() {
    [[ "$#" -eq 1 ]] || return "$EX_USAGE"
    local path="$1"
    if [[ -d "$path" ]]; then
        echo "$(cd "$path" && pwd)"
        return 0
    else
        return "$EX_DATAERR"
    fi
}

# ==================================================================================================

# Script name.
readonly NAME='rarch'
# Script version.
readonly VERSION='2.3'
# Script year.
readonly YEAR='2020'

print_version() {
    echo "$NAME $VERSION, Copyright (C) $YEAR Rui Carlos Goncalves"
}

print_help() {
    print_version
    echo "Creates encrypted TAR archives from directories using GnuPG, with the public keys"
    echo "specified. An output file is created for each input directory.  Optionally it"
    echo "can append the current date to the created TAR archive, so that the archive"
    echo "creation date can be known after decrypting the file."
    echo ""
    echo "Usage:"
    echo "    $NAME [options] [directories]"
    echo ""
    echo "Options:"
    echo "    -r USER-ID user IDs of the GnuPG public keys for encrypting the archive"
    echo "    -d         append current date to TAR archive (format YYYYMMDD)"
    echo "    -v         print the script version and exit"
    echo "    -h         print this help message and exit"
    echo ""
    echo "Return values:"
    echo "    The script returns 0 if no error occurred.  In case of error it returns an"
    echo "    error exit code based on sysexits.h."
    echo ""
    echo "$NAME comes with ABSOLUTELY NO WARRANTY.  This is free software, and"
    echo "you are welcome to redistribute it under certain conditions.  See the GNU"
    echo "General Public Licence for details."
}

# ==================================================================================================

DATE=''
KEYS=''
while getopts 'r:dvh' FLAG; do
    case "$FLAG" in
        r)
            KEYS="$KEYS --recipient $OPTARG"
            ;;
        d)
            DATE="-$(date +'%Y%m%d')"
            ;;
        v)
            print_version
            exit 0
            ;;
        h)
            print_help
            exit 0
            ;;
        \?)
            echo ""
            print_help
            exit "$EX_USAGE"
            ;;
    esac
done
readonly DATE
readonly KEY


shift "$((OPTIND-1))"
if [[ "$#" -eq 0 ]]; then
    echo "$NAME: no input directories specified" >&2
    echo ""
    print_help
    exit "$EX_USAGE"
fi

if ! hash gpg; then
    echo "$NAME: 'gpg' not available (required)" >&2
    exit "$EX_UNAVAILABLE"
fi


# Exit code associated with the latest error (used as the script exit code).
error=0

readonly WORKDIR="$(pwd)"
# Define a temporary path in current working directory.
# It will be used to place the temporary TAR archives.
readonly TMP="$WORKDIR/$(mktemp -d rarch.tmp.XXXXXXXXXXXX)"
if [[ "$?" -ne 0 ]]; then
    echo "$NAME: error creating archives" >&2
    exit "$EX_IOERR"
fi
# Stores the latest path used for temporary TAR archive (the one we still may have to delete).
tar=''
# Setup a trap to cleanup temporary files.
cleanup() {
    [[ "$(dirname "$tar")" == "$TMP" ]] && [[ -f "$tar" ]] && rm "$tar"
    [[ -d "$TMP" ]] && rmdir "$TMP"
}
trap cleanup EXIT SIGINT SIGTERM SIGQUIT


for dir in "$@"; do
    if [[ "$dir" == "/" ]]; then
        echo "$NAME: cannot process the root directory (skipping directory)" >&2
        error="$EX_DATAERR"
    elif [[ ! -d "$dir" ]]; then
        echo "$NAME: '$dir' is not a valid directory (skipping directory)" >&2
        error="$EX_DATAERR"
    else
        abs="$(get_absolute_dir_path "$dir")"
        base="$(basename "$abs")"
        dir="$(dirname "$abs")"
        tar="$TMP/$base$DATE.tar"
        gpg="$WORKDIR/$base.gpg"

        if [[ -e "$gpg" ]]; then
            echo "$NAME: output file '$gpg' already exists (skipping directory)" >&2
            error="$EX_CANTCREAT"
        else
            tar cf "$tar" -C "$dir" "$base"
            if [[ "$?" -eq 0 ]]; then
                gpg --quiet --encrypt $KEYS --output "$gpg" "$tar"
                if [[ "$?" -ne 0 ]]; then
                    echo "$NAME: error encrypting archive" >&2
                    error="$EX_SOFTWARE"
                fi
            else
                echo "$NAME: error creating archive" >&2
                error="$EX_IOERR"
            fi
            [[ -f "$tar" ]] && rm "$tar"
        fi
    fi
done

exit "$error"
