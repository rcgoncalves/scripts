#!/bin/bash
# ==================================================================================================
# 
# rbackup 2.0 - create and maintain versioned folder backups
# Copyright (C) 2013, 2015, 2017 Rui Carlos Gonçalves
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ==================================================================================================
# 
# Author:	Rui Carlos Gonçalves <rcgoncalves.pt@gmail.com>
# Version:	2.0
# Date:		December 26, 2017
# License:      GNU GPL v2
#
# ==================================================================================================
#
# ABOUT THIS SCRIPT:
#
# Creates and maintains versioned folder backups.
#
# The first backups created in a month are saved in a folder with name format
# "backup-m<YEAR><MONTH>".  The first backups created in a week are saved in a folder with name
# format "backup-w<YEAR><WEEK>".  The remaining backups are saved in a folder with name format
# "backup-d<YEAR><MONTH><DAY>" (which means at most one backup is saved per day).
#
# Monthly and weekly backups are full, whereas daily backups only store the changes of the past
# five days.
#
# It also deletes the old backup files after a configurable period of time.  NOTE: the files to
# delete are determined according to the modification time provided by the file system.  Thus, those
# timestamps should not be changed after the creation of the backups.
#
# ==================================================================================================
#
# Change Log
#
# Version 2.0
#   2017-12-26
#     * General improvements.
#     * Fix bug creating daily backup archive.
#
# Version 1.1
#   2015-08-01
#     * Changed backup file names.
#
# Version 1.0.1
#   2013-03-21
#     * Minor bug fixed.
#
# Version 1.0
#   2011-09-24
#     * First version.
#
# ==================================================================================================

set -u

# Error exit codes.
readonly EX_USAGE=64
readonly EX_DATAERR=65
readonly EX_NOINPUT=66
readonly EX_IOERR=74

# ==================================================================================================

# Script name.
readonly NAME='rbackup'
# Script version.
readonly VERSION='2.0'
# Script year.
readonly YEAR='2017'

print_version() {
    echo "$NAME $VERSION, Copyright (C) $YEAR Rui Carlos Goncalves"
}

print_help() {
    print_version
    echo "Creates and maintains versioned folder backups, according to a customizable"
    echo "retention policy.  This script creates a backup archive from a given source"
    echo "directory, and places it into a given target directory."
    echo "It organizes the downloaded files locally in folders whose name identify"
    echo "the date of the files, for versioning.  The versioning mechanism separates"
    echo "backups in daily (incremental, containing only files changed in the last five"
    echo "days), weekly and monthly (both full), and for each of those the user can"
    echo "specify the retention policy (i.e. the number of days to preserve each backup)."
    echo "NOTE: the files to delete are determined according to the modification time"
    echo "provided by the file system.  Thus, those timestamps should not be changed"
    echo "after the creation of the backups."
    echo ""
    echo "Usage:"
    echo "    $NAME [options]"
    echo ""
    echo "Options:"
    echo "    -s source      the folder to backup"
    echo "    -t target      The folder to store the backup archives"
    echo "    -c compression The compression format for Tar (z or j)"
    echo "    -d days        the number of days to retain daily backups (default: 7)"
    echo "    -w days        the number of days to retain weekly backups (default: 30)"
    echo "    -m days        the number of days to retain monthly backups (default: 365)"
    echo "    -v             print the script version and exit"
    echo "    -h             print this help message and exit"
    echo ""
    echo "Return values:"
    echo "    The script returns 0 if no error occurred.  In case of error it returns an"
    echo "    error exit code based on sysexits.h."
    echo ""
    echo "$NAME comes with ABSOLUTELY NO WARRANTY.  This is free software, and"
    echo "you are welcome to redistribute it under certain conditions.  See the GNU"
    echo "General Public Licence for details."
}

# ==================================================================================================

# Folder to backup.
SOURCE=''
# Directory to store the backup.
TARGET=''
# Tar compression (z or j).
COMP=''
# Number of days to keep the daily backups.
DDAYS=7
# Number of days to keep the weekly backups.
WDAYS=30
# Number of days to keep the monthly backups.
MDAYS=365

while getopts 'c:s:t:d:w:m:vh' FLAG; do
    case "$FLAG" in
        s)
            SOURCE="$OPTARG"
            ;;
        t)
            TARGET="$OPTARG"
            ;;
        c)
            COMP="$OPTARG"
            ;;
        d)
            DDAYS="$OPTARG"
            ;;
        w)
            WDAYS="$OPTARG"
            ;;
        m)
            MDAYS="$OPTARG"
            ;;
        v)
            print_version
            exit 0
            ;;
        h)
            print_help
            exit 0
            ;;
        \?)
            echo ""
            print_help
            exit "$EX_USAGE"
            ;;
    esac
done
readonly COMP
readonly SOURCE
readonly TARGET
readonly DDAYS
readonly WDAYS
readonly MDAYS


shift "$((OPTIND-1))"
if [[ ! -z "$COMP" ]] && [[ "$COMP" != 'z' ]] && [[ "$COMP" != 'j' ]]; then
    echo "$NAME: invalid compression option ($COMP)"
    exit "$EX_USAGE"
fi
if [[ -z "$SOURCE" ]]; then
    echo "$NAME: missing parameter -s (source directory)" >&2
    exit "$EX_USAGE"
fi
if [[ ! -d "$SOURCE" ]]; then
    echo "$NAME: source directory ($SOURCE) does not exist" >&2
    exit "$EX_NOINPUT"
fi
if [[ -z "$TARGET" ]]; then
    echo "$NAME: missing parameter -t (target directory)" >&2
    exit "$EX_USAGE"
fi
if [[ ! -d "$TARGET" ]]; then
    echo "$NAME: target directory ($TARGET) does not exist" >&2
    exit "$EX_DATAERR"
fi

# ==================================================================================================
# Compression extension.
if [[ "$COMP" == 'z' ]]; then
    readonly CEXT='.gz'
elif [[ "$COMP" == 'j' ]]; then
    readonly CEXT='.bz2'
else
    readonly CEXT=''
fi

# Backups file names
readonly DNAME="backup-d$(date +%Y-%m-%d).tar$CEXT"
readonly WNAME="backup-w$(date +%Y-%U).tar$CEXT"
readonly MNAME="backup-m$(date +%Y-%m).tar$CEXT"

readonly BASENAME="$(basename "$SOURCE")"
readonly DIRNAME="$(dirname "$SOURCE")"

# Create backup file.
if [[ ! -f "$TARGET/$MNAME" ]]; then
    tar "-c$COMP" -f "$TARGET/$MNAME" -C "$DIRNAME" "$BASENAME"
    if [[ "$?" -ne 0 ]]; then
        echo "$NAME: error creating backup archive"
        exit "$EX_IOERR"
    fi
elif [[ ! -f $TARGET/$WNAME ]]; then
    tar "-c$COMP" -f "$TARGET/$WNAME" -C "$DIRNAME" "$BASENAME"
    if [[ "$?" -ne 0 ]]; then
        echo "$NAME: error creating backup archive"
        exit "$EX_IOERR"
    fi
else 
    find "$SOURCE" -mtime -5 -type f -exec bash -c \
        "FILE='{}'; PREFIX='$DIRNAME/'; tar -r$COMP -f '$TARGET/$DNAME' -C '$DIRNAME' "'"${FILE#$PREFIX}"' \;
    if [[ "$?" -ne 0 ]]; then
        echo "$NAME: error creating backup archive"
        exit "$EX_IOERR"
    fi
fi


error=0

find "$TARGET" -name 'backup-d*' -mtime "+$DDAYS" -delete \
    || { echo "$NAME: error cleaning up old daily backups" >&2; error="$EX_IOERR"; }
find "$TARGET" -name 'backup-w*' -mtime "+$WDAYS" -delete \
    || { echo "$NAME: error cleaning up old weekly backups" >&2; error="$EX_IOERR"; }
find "$TARGET" -name 'backup-m*' -mtime "+$MDAYS" -delete \
    || { echo "$NAME: error cleaning up old monthly backups" >&2; error="$EX_IOERR"; }

exit "$error"
